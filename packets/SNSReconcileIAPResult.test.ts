import { assertEquals } from "$std/assert/mod.ts";
import {
  decodeSNSReconcileIAPResultPayload,
  encodeSNSReconcileIAPResultPayload,
  SNSReconcileIAPResultData,
} from "./SNSReconcileIAPResult.ts";

// deno-fmt-ignore
const packets: [SNSReconcileIAPResultData, Uint8Array][] = [
  [
    {
        nonce: 0x0400000000000000n,
        unknownHeader: 0xb36a9d3df6e30d00n,
        config: {"balance":{"currency":{"echopoints":{"val":130}}},"transactionid":85}
    },
    new Uint8Array([0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb3,0x6a,0x9d,0x3d,0xf6,0xe3,0x0d,0x00,0x7b,0x22,0x62,0x61,0x6c,0x61,0x6e,0x63,0x65,0x22,0x3a,0x7b,0x22,0x63,0x75,0x72,0x72,0x65,0x6e,0x63,0x79,0x22,0x3a,0x7b,0x22,0x65,0x63,0x68,0x6f,0x70,0x6f,0x69,0x6e,0x74,0x73,0x22,0x3a,0x7b,0x22,0x76,0x61,0x6c,0x22,0x3a,0x31,0x33,0x30,0x7d,0x7d,0x7d,0x2c,0x22,0x74,0x72,0x61,0x6e,0x73,0x61,0x63,0x74,0x69,0x6f,0x6e,0x69,0x64,0x22,0x3a,0x38,0x35,0x7d,0x00])
  ],
];

for (let i = 0; i < packets.length; i++) {
  const [data, payload] = packets[i];
  Deno.test(`encode SNSReconcileIAPResult payload ${i}`, () =>
    assertEquals(
      new Uint8Array(encodeSNSReconcileIAPResultPayload(data, true)),
      payload,
    ));

  Deno.test(`decode SNSReconcileIAPResult payload ${i}`, () =>
    assertEquals(
      decodeSNSReconcileIAPResultPayload(payload, true),
      data,
    ));
}
